/*
* How to read a packet capture file.
*/

/*
* Step 1 - Add includes
*/
#include <string>
#include <iostream>
#include <pcap.h>

using namespace std;

// Define template function
template <class T>
int getArrayLen(T &array) {
	return sizeof(array) / sizeof(array[0]);
}

int main(int argc, char *argv[])
{
	/*
	* Step 2 - Get a file name
	*/

	string file = "C:\\Users\\KT\\Desktop\\543.cap";

	// Declare Time Value
	struct tm *ltime;
	char timestr[24];
	time_t local_tv_sec;
	

	/*
	* Step 3 - Create an char array to hold the error.
	*/

	// Note: errbuf in pcap_open functions is assumed to be able to hold at least PCAP_ERRBUF_SIZE chars
	//       PCAP_ERRBUF_SIZE is defined as 256.
	// http://www.winpcap.org/docs/docs_40_2/html/group__wpcap__def.html
	char errbuff[PCAP_ERRBUF_SIZE];

	/*
	* Step 4 - Open the file and store result in pointer to pcap_t
	*/

	// Use pcap_open_offline
	// http://www.winpcap.org/docs/docs_41b5/html/group__wpcapfunc.html#g91078168a13de8848df2b7b83d1f5b69
	pcap_t * pcap = pcap_open_offline(file.c_str(), errbuff);

	/*
	* Step 5 - Create a header and a data object
	*/

	// Create a header object:
	// http://www.winpcap.org/docs/docs_40_2/html/structpcap__pkthdr.html
	struct pcap_pkthdr *header;

	// Create a character array using a u_char
	// u_char is defined here:
	// C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Include\WinSock2.h
	// typedef unsigned char   u_char;
	const u_char *data;

	/*
	* Step 6 - Loop through packets and print them to screen
	*/

	// Declare packet status
	u_int packetCount = 0;
	u_int pass_num = 0;
	u_int fail_num = 0;

	// Declare packet data raw value in array
	char packet_data1[8];
	char packet_data2[8];

	// Declare error message
	string Error_Msg_data1[] = { "STC Self-Test ", "CPU Self-Test" };
	string Error_Msg_data2[] = { "STC Rom", "PBIST Rom", "CPU Rom", "All Dual-Port" };


	while (int returnValue = pcap_next_ex(pcap, &header, &data) >= 0)
	{
		// Print using printf. See printf reference:
		// http://www.cplusplus.com/reference/clibrary/cstdio/printf/

		if(header->len == 60){// Start >> By limit Packet size is '60' bytes.

			// Show the packet number
			printf("Packet # %i\n", ++packetCount);

			// Show the size in bytes of the packet
			printf("Packet size: %d bytes\n", header->len);

			// Show a warning if the length captured is different
			if (header->len != header->caplen)
				printf("Warning! Capture size different than packet size: %ld bytes\n", header->len);

			// Show Epoch Time
			//printf("Epoch Time: %d:%d seconds\n", header->ts.tv_sec, header->ts.tv_usec);

			
			// Convert Time Format
			local_tv_sec = header->ts.tv_sec;
			ltime = localtime(&local_tv_sec);
			strftime(timestr, sizeof timestr, "%Y-%m-%d %H:%M:%S", ltime);
			printf("Time: %s.%.6d \n", timestr, header->ts.tv_usec);
			

			// loop through the packet and print it as hexidecimal representations of octets
			// We also have a function that does this similarly below: PrintData()
			for (u_int i = 0; (i < header->caplen); i++)
			{
				// Start printing on the next after every 16 octets
				if ((i % 16) == 0) printf("\n");

				// Print each octet as hex (x), make sure there is always two characters (.2).
				printf("%.2x ", data[i]);
			
			}

			// Turn data[1st],data[2nd] into Binary and story in array.
			_itoa(data[9], packet_data1, 2);
			_itoa(data[23], packet_data2, 2);
			
			// Fliter Data[10],Data[11] is "0" or not.
			if (data[0] == 0 && data[1] == 0) {
				printf("\nStatus >> Pass");
				printf(" (Data[1st]:%.2x, Data[2nd]:%.2x)", data[9], data[23]);

				pass_num++;
			}
			else {

				printf("\nStatus >> Fail");
				printf(" (Data[1st]:%.2x, Data[2nd]:%.2x)", data[9], data[23]);
				
				for (int i = 0; i < getArrayLen(Error_Msg_data1); i++) {
					if (packet_data1[i] == '1') {
						printf("\nCheck Error >> %s", Error_Msg_data1[i].c_str());
					}
				}
				
				for (int i = 0; i < getArrayLen(Error_Msg_data2); i++) {
					if (packet_data2[i] == '1') {
						printf("\nCheck Error >> %s", Error_Msg_data2[i].c_str());
					}
				}
				
				fail_num++;
			}

			// Add two lines between packets
			printf("\n\n");

		}//End
	
	}
	//Count Total Packet Information
	printf("=================================");
	printf("\n[Total:%d  Pass:%d  Fail:%d]", packetCount, pass_num, fail_num);
	printf("\n=================================");

	//Quit process after press "Enter"
	cin.get();
}
