/*
 Step1:選擇網卡
 Step2:使用winpcap進行收發數據包
*/
#include <string>
#include <iostream>
#include <pcap.h>

using namespace std;

// Define 'template function' to calculate the data length
template <class T>
int getArrayLen(T &array) {
	return sizeof(array) / sizeof(array[0]);
}

// Declare packet status
u_int packetCount = 0;
u_int pass_num = 0;
u_int fail_num = 0;

// Declare error message
string Error_Msg_data1[] = {"STC Self-Test ", "CPU Self-Test "};
string Error_Msg_data2[] = {"STC Rom ", "PBIST Rom ", "CPU Rom ", "All Dual-Port "};

/* packet handler 函數原型 */
void packet_handler(u_char *param, const struct pcap_pkthdr *header, const u_char *pkt_data);

int main()
{
	pcap_if_t *alldevs;
	pcap_if_t *d;
	int inum;
	int i = 0;
	pcap_t *adhandle;
	char errbuf[PCAP_ERRBUF_SIZE];
	
	/* 獲取本機網卡設備清單 */
	if (pcap_findalldevs_ex(PCAP_SRC_IF_STRING, NULL, &alldevs, errbuf) == -1)
	{
		fprintf(stderr, "Error in pcap_findalldevs: %s\n", errbuf);
		exit(1);
	}

	printf("The Interfaces is as follows:\n");
	/* 顯示出網卡清單 */
	for (d = alldevs; d; d = d->next)
	{
		printf("%d. %s", ++i, d->name);
		if (d->description)
			printf(" (%s)\n", d->description);
		else
			printf(" (No description available)\n");
	}

	if (i == 0)
	{
		printf("\nNo interfaces found! Make sure WinPcap is installed.\n");
		return -1;
	}

	printf("\nEnter the interface number (1-%d):", i);
	scanf("%d", &inum);

	if (inum < 1 || inum > i)
	{
		printf("\nInterface number out of range.\n");
		/* 釋放設備清單 */
		pcap_freealldevs(alldevs);
		return -1;
	}

	/* 跳轉到選中的適配器 */
	for (d = alldevs, i = 0; i< inum - 1; d = d->next, i++);

	/* 打開設備 */
	if ((adhandle = pcap_open(d->name,          // 設備名
		65536,            // 65535保證能捕獲到不同資料連結層上的每個資料包的全部內容
		PCAP_OPENFLAG_PROMISCUOUS,    // 混雜模式
		1000,             // 讀取超時時間
		NULL,             // 遠端機器驗證
		errbuf            // 錯誤緩衝集區
	)) == NULL)
	{
		fprintf(stderr, "\nUnable to open the adapter. %s is not supported by WinPcap\n", d->name);
		/* 釋放設備清單 */
		pcap_freealldevs(alldevs);
		return -1;
	}

	printf("\nlistening on %s...\n", d->description);

	/* 釋放設備清單 */
	pcap_freealldevs(alldevs);

	/* 開始捕獲 */
	pcap_loop(adhandle, 0, packet_handler, NULL);

	return 0;

}

/* 每次捕獲到資料包時，libpcap都會自動調用這個回呼函數 */
void packet_handler(u_char *param, const struct pcap_pkthdr *header, const u_char *pkt_data)
{
	// Declare time value
	struct tm *ltime;
	char timestr[24];
	time_t local_tv_sec;

	//Declare packet data raw value(binary) in array
	char packet_data1[8];
	char packet_data2[8];

	// Convert time format
	local_tv_sec = header->ts.tv_sec;
	ltime = localtime(&local_tv_sec);
	strftime(timestr, sizeof timestr, "%Y-%m-%d %H:%M:%S", ltime);

	if (header->len == 60) {// Start >> By limit Packet size is '60' bytes.
		printf("\nPacket # %i\n", ++packetCount);
		printf("Time: %s,%.6d len:%d\n", timestr, header->ts.tv_usec, header->len);
		printf("Data Raw:");
			for (u_int i = 0; (i < header->caplen); i++)
			{				
				// Start printing on the next after every 16 octets
				if ((i % 16) == 0) printf("\n");

				// Print each octet as hex (x), make sure there is always two characters (.2).
				printf("%.2x ", pkt_data[i]);
			}
			printf("\n");

			// Turn data[1st],data[2nd] into Binary and story in array.
			_itoa(pkt_data[10], packet_data1, 2);
			_itoa(pkt_data[11], packet_data2, 2);

			// Fliter Data[10],Data[11] is "0" or not.
			if (pkt_data[10] == 0 && pkt_data[11] == 0) {// if Pass...
				printf("\nStatus >> Pass");
				printf(" (Data[1st]:%.2x, Data[2nd]:%.2x)", pkt_data[10], pkt_data[11]);

				pass_num++;
			}
			else {// if fail...
				printf("\nStatus >> Fail");
				printf(" (Data[1st]:%.2x, Data[2nd]:%.2x)", pkt_data[10], pkt_data[11]);

				for (int i = 0; i < getArrayLen(Error_Msg_data1); i++) {
					if (packet_data1[i] == '1') {
						printf("\nCheck Error >> %s", Error_Msg_data1[i].c_str());
					}
				}
				for (int i = 0; i < getArrayLen(Error_Msg_data2); i++) {
					if (packet_data2[i] == '1') {
						printf("\nCheck Error >> %s", Error_Msg_data2[i].c_str());
					}
				}
				fail_num++;
			}
			
			//Count Total Packet Information
			printf("\n===============================================");
			printf("\n[Total:%d  Pass:%d  Fail:%d]", packetCount, pass_num, fail_num);
			printf("\n===============================================");

			// Add a lines between packets
			printf("\n");
	}//End

}
